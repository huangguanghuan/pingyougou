<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd
       http://code.alibabatech.com/schema/dubbo
       http://code.alibabatech.com/schema/dubbo/dubbo.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- ##### 配置http请求URL拦截规则 ##### -->
    <!-- 配置哪些请求URL不需要拦截 -->
<security:http pattern="/*.html" security="none"/>
<security:http pattern="/css/**" security="none"/>
<security:http pattern="/img/**" security="none"/>
<security:http pattern="/js/**" security="none"/>
<security:http pattern="/plugins/**" security="none"/>
<security:http pattern="/seller/save" security="none"/>
<security:http pattern="/verify" security="none"/>
 <!-- 配置那些请求URL需要拦截-->
    <!--entry-point-ref：配置认证的入口-->
<security:http entry-point-ref="authenticationEntryPoint">
   <!-- permitAll():给所有的权限，会近登录的过滤器-->
    <security:intercept-url pattern="/login" access="permitAll()"/>
    <!-- 配置拦截的请求URL，需要用什么角色访问 ROLE_SELLER* -->
    <security:intercept-url pattern="/**" access="hasRole('SELLER')"/>
   <!--   //配置表单登录
    <security:form-login
            login-page="/shoplogin.html"
            default-target-url="/admin/index.html"
            always-use-default-target="true"
            authentication-failure-url="/shoplogin.html"/>
            -->
   <!--关闭CSRF跨站点请求伪造 &ndash;&gt; -->
    <security:csrf disabled="true"/>

    <security:headers>
        <!-- 配置头信息，指定框架页策略(iframe子窗口也可以访问)-->
        <security:frame-options policy="SAMEORIGIN"/>
    </security:headers>
    <!--  配置退出登录-->
    <security:logout logout-url="/logout"/>
</security:http>
    <!--配置自己的控制器作为认证的入口-->
    <bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
        <constructor-arg name="loginFormUrl" value="/login"/>
    </bean>
    <!-- 配置加密对象-->
    <bean id="bCryptPasswordEncoder"
          class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"/>

    <!-- ######### 配置身份认证管理器 ########## -->
    <security:authentication-manager id="authenticationManager">
        <!-- 配置认证提供者 -->
        <security:authentication-provider
                user-service-ref="userDetailsService">
        <!-- 设置加密方式-->
            <security:password-encoder ref="bCryptPasswordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!--##########配置dubbo服务消费者########### -->
    <dubbo:application name="pingyougou-shop-web"/>
    <!-- 配置zookeeper作为注册中心，发现服务地址-->
    <dubbo:registry address="zookeeper://192.168.12.131:2181"/>
    <!--配置应用单个服务，生产服务接口代理对象 -->
    <dubbo:reference id="sellerService"
            interface="com.pingyougou.service.SellerService"/>
    <!-- 自定义认证的提供者 -->
    <bean id="userDetailsService"
          class="com.pingyougou.shop.service.UserDetailsServiceImpl">
            <property name="sellerService" ref="sellerService"/>
    </bean>
</beans>